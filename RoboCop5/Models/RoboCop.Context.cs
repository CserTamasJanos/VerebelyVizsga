//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoboCop5.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RoboCopEntities : DbContext
    {
        public RoboCopEntities()
            : base("name=RoboCopEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Arcok> Arcok { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Elkovetok> Elkovetok { get; set; }
        public virtual DbSet<Hajszinek> Hajszinek { get; set; }
        public virtual DbSet<Jarasok> Jarasok { get; set; }
        public virtual DbSet<KozteruletTipusok> KozteruletTipusok { get; set; }
        public virtual DbSet<Lopasok> Lopasok { get; set; }
        public virtual DbSet<Magassagok> Magassagok { get; set; }
        public virtual DbSet<Megyek> Megyek { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<MenuRolesMapping> MenuRolesMapping { get; set; }
        public virtual DbSet<ProcedureLog> ProcedureLog { get; set; }
        public virtual DbSet<Procedures> Procedures { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Schools> Schools { get; set; }
        public virtual DbSet<Sulyok> Sulyok { get; set; }
        public virtual DbSet<Szemelyek> Szemelyek { get; set; }
        public virtual DbSet<Szemszinek> Szemszinek { get; set; }
        public virtual DbSet<Targyak> Targyak { get; set; }
        public virtual DbSet<Termetek> Termetek { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<UsersRolesMapping> UsersRolesMapping { get; set; }
        public virtual DbSet<UsersSchoolsMapping> UsersSchoolsMapping { get; set; }
        public virtual DbSet<Varosok> Varosok { get; set; }
        public virtual DbSet<SchoolsAndRoles> SchoolsAndRoles { get; set; }
    
        [DbFunction("RoboCopEntities", "UsersBaseData")]
        public virtual IQueryable<UsersBaseData_Result> UsersBaseData(string chiper)
        {
            var chiperParameter = chiper != null ?
                new ObjectParameter("chiper", chiper) :
                new ObjectParameter("chiper", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<UsersBaseData_Result>("[RoboCopEntities].[UsersBaseData](@chiper)", chiperParameter);
        }
    
        [DbFunction("RoboCopEntities", "UsersMenus")]
        public virtual IQueryable<UsersMenus_Result> UsersMenus(string chiper)
        {
            var chiperParameter = chiper != null ?
                new ObjectParameter("chiper", chiper) :
                new ObjectParameter("chiper", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<UsersMenus_Result>("[RoboCopEntities].[UsersMenus](@chiper)", chiperParameter);
        }
    
        public virtual int LogProcedureCall(string name, Nullable<int> successCode, string arguments)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var successCodeParameter = successCode.HasValue ?
                new ObjectParameter("successCode", successCode) :
                new ObjectParameter("successCode", typeof(int));
    
            var argumentsParameter = arguments != null ?
                new ObjectParameter("arguments", arguments) :
                new ObjectParameter("arguments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogProcedureCall", nameParameter, successCodeParameter, argumentsParameter);
        }
    
        public virtual int RegisterUser(string email, string code, ObjectParameter successCode)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterUser", emailParameter, codeParameter, successCode);
        }
    
        public virtual int SetUserCipher(string email, string cipher, ObjectParameter successCode)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var cipherParameter = cipher != null ?
                new ObjectParameter("cipher", cipher) :
                new ObjectParameter("cipher", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetUserCipher", emailParameter, cipherParameter, successCode);
        }
    }
}
